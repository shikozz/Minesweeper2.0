<Application x:Class="saperdun.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:local="clr-namespace:saperdun"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Themes/LightTheme.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <System:Boolean x:Key="isGlow">False</System:Boolean>
            <Style TargetType="{x:Type Window}" x:Key="MyWindowStyle">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

            <Style TargetType="{x:Type Grid}" x:Key="MyHeaderGridStyle">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
            </Style>

            <Style TargetType="{x:Type TextBlock}" x:Key="MyHeaderTextStyle">
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
            </Style>

            <Style TargetType="Button">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="Effect" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    UseLayoutRounding="True">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  UseLayoutRounding="True"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ButtonHoverForegroundBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Button" x:Key="BaseButtonStyle">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="Effect" Value="{x:Null}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border Background="{TemplateBinding Background}"
                         BorderBrush="{TemplateBinding BorderBrush}"
                         BorderThickness="{TemplateBinding BorderThickness}"
                                    UseLayoutRounding="True">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  UseLayoutRounding="True"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>

                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ButtonHoverForegroundBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="Button" x:Key="GlowButtonStyle">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ButtonForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Border x:Name="GlowBorder"
                         Background="{TemplateBinding Background}"
                         BorderThickness="2"
                         CornerRadius="0"
                         BorderBrush="Transparent"
                         Padding="{TemplateBinding Padding}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="GlowBorder" Property="BorderBrush">
                                        <Setter.Value>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,1">
                                                <GradientStop Color="#70EEEEAA" Offset="0.3"/>
                                                <GradientStop Color="#95EEEEAA" Offset="0.5"/>
                                                <GradientStop Color="#70EEEEAA" Offset="0.7"/>
                                            </LinearGradientBrush>
                                        </Setter.Value>
                                    </Setter>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style TargetType="Label" x:Key="LabelStyle">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
                <Setter Property="TextOptions.TextRenderingMode" Value="Grayscale"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Label">
                            <Border Background="{TemplateBinding Background}"
         BorderBrush="{TemplateBinding BorderBrush}"
         BorderThickness="{TemplateBinding BorderThickness}"
                                    UseLayoutRounding="True">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                       VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  UseLayoutRounding="True"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="{x:Type TextBlock}" x:Key="TextBlockStyle">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="UseLayoutRounding" Value="True"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
            </Style>

            <Style TargetType="TextBox" x:Key="TextBoxStyle">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Style.Triggers>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ButtonHoverForegroundBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type CheckBox}" x:Key="CheckBoxStyle">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type CheckBox}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Border x:Name="Border"
                                        Width="{TemplateBinding Height}"
                                        Height="{TemplateBinding Height}"
                                        Background="{TemplateBinding Background}"
                                        BorderBrush="{TemplateBinding BorderBrush}"
                                        BorderThickness="{TemplateBinding BorderThickness}">
                                    <Grid>
                                        <Ellipse x:Name="Circle"
                                              Fill="{DynamicResource ButtonMineBackgroundBrush}"
                                                 Width="10"
                                                 Height="10"
                                                 HorizontalAlignment="Center"
                                                 VerticalAlignment="Center"
                                              Stretch="Fill"
                                              StrokeThickness="0"
                                              Visibility="Hidden"/>
                                    </Grid>
                                </Border>

                                <ContentPresenter x:Name="MyContentPresenter"
                                                  Grid.Column="1"
                                                  Margin="5,0,0,0"
                                                  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                                  RecognizesAccessKey="True"/>
                            </Grid>

                            <ControlTemplate.Triggers>
                                <Trigger Property="IsChecked" Value="True">
                                    <Setter TargetName="Circle" Property="Visibility" Value="Visible"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style TargetType="DataGrid">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                <Setter Property="RowBackground" Value="{DynamicResource BackgroundBrush}"/>
            </Style>

            <Style TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="Background" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource BackgroundBrush}"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Style>

            <Style TargetType="{x:Type DataGridCell}">
                <Style.Triggers>
                    <Trigger Property="IsSelected" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ButtonHoverForegroundBrush}"/>
                        <Setter Property="FontFamily" Value="{DynamicResource fontFamily}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style TargetType="{x:Type DataGridRow}">
                <Setter Property="BorderThickness" Value="0"/>
            </Style>
            <!--============================================================================================= -->
            <ControlTemplate x:Key="SysButtonClose" TargetType="{x:Type Button}">
                <Grid x:Name="grid" Background="{x:Null}" Width="45" Height="20">
                    <Border Name="Fon" Background="#FFC75050"/>
                    <Path 
            HorizontalAlignment="Center" VerticalAlignment="Center"
            Panel.ZIndex="2"
            SnapsToDevicePixels="False"
            Stroke="#FFFFFF" StrokeThickness="1.5"
            Visibility="Visible"
            Data="M0,0 7,7 M7,0 0,7">
                    </Path>
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                          Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" 
                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="#FFE04343"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="#FF993D3D"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <!-- ========================================================================================== -->
            <ControlTemplate x:Key="SysButtonMinimize" TargetType="{x:Type Button}">
                <Grid x:Name="grid" Background="{x:Null}" Width="22" Height="20">
                    <Border Name="Fon" Background="Transparent"/>
                    <Path
            HorizontalAlignment="Center" VerticalAlignment="Center"
            Name="FonImage"
            Panel.ZIndex="2"
            SnapsToDevicePixels="False"
            Stroke="{DynamicResource ForegroundBrush}" StrokeThickness="2"
            RenderOptions.EdgeMode="Aliased"
            Visibility="Visible"
            Data="M 0,7 7,7">
                    </Path>
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      Margin="{TemplateBinding Padding}" 
                                      RecognizesAccessKey="True" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Stroke" TargetName="FonImage" Value="{DynamicResource BackgroundBrush}"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="{DynamicResource ButtonAdjacentBackgroundBrush}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <!-- ========================================================================================== -->
            <ControlTemplate x:Key="SysButtonMaximize" TargetType="{x:Type Button}">
                <Grid x:Name="grid" Background="{x:Null}" Width="22" Height="20">
                    <Border Name="Fon" Background="Transparent"/>
                    <Path Name="ImageNormal"
            HorizontalAlignment="Center" VerticalAlignment="Center"
            Panel.ZIndex="2" SnapsToDevicePixels="False"
            Stroke="{DynamicResource ForegroundBrush}" StrokeThickness="1"
            Visibility="Visible"
            RenderOptions.EdgeMode="Aliased"
            Data="M0,0 0,7 9,7 9,0 0,0 0,1 0,1 9,1">
                    </Path>
                    <Path Name="ImageMaximized"
            HorizontalAlignment="Center" VerticalAlignment="Center"
            Panel.ZIndex="2" SnapsToDevicePixels="False"
            Stroke="#FF282828" StrokeThickness="1"
            Visibility="Hidden"
            RenderOptions.EdgeMode="Aliased"
            Data="M0,2 0,9 7,9 7,2 0,2 0,3 0,3 7,3 M2,0 9,0 9,7">
                    </Path>
                    <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                      Margin="{TemplateBinding Padding}" 
                                      RecognizesAccessKey="True" 
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="{DynamicResource ButtonHoverBackgroundBrush}"/>
                        <Setter Property="Stroke" TargetName="ImageNormal" Value="{DynamicResource BackgroundBrush}"/>
                        <Setter Property="Stroke" TargetName="ImageMaximized" Value="{DynamicResource BackgroundBrush}"/>
                    </Trigger>

                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="Background" TargetName="Fon" Value="{DynamicResource ButtonAdjacentBackgroundBrush}"/>
                    </Trigger>

                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                        <Setter Property="Visibility" TargetName="ImageNormal" Value="Hidden"/>
                        <Setter Property="Visibility" TargetName="ImageMaximized" Value="Visible"/>
                    </DataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <!-- ========================================================================================== -->
            <Style TargetType="{x:Type ToggleButton}" x:Key="ToggleButtonStyle">
                <Setter Property="Width" Value="40"/>
                <Setter Property="Height" Value="20"/>
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource ForegroundBrush}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Grid>
                                <Rectangle x:Name="BackgroundRectangle" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderThickness}" RadiusX="10" RadiusY="10"/>
                                <Ellipse x:Name="Knob"
                                         Width="16"
                                         Height="16"
                                         Fill="White"
                                         HorizontalAlignment="Left"
                                         RenderTransformOrigin="0.5,0.5">
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform x:Name="KnobTranslateTransform" X="2"/>
                                    </Ellipse.RenderTransform>
                                </Ellipse>

                                <VisualStateManager.VisualStateGroups>
                                    <VisualStateGroup x:Name="CheckStates">
                                        <VisualState x:Name="Checked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="KnobTranslateTransform"
                                                                 Storyboard.TargetProperty="X"
                                                                 To="22"
                                                                 Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                        <VisualState x:Name="Unchecked">
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetName="KnobTranslateTransform"
                                                                 Storyboard.TargetProperty="X"
                                                                 To="2"
                                                                 Duration="0:0:0.1"/>
                                            </Storyboard>
                                        </VisualState>
                                    </VisualStateGroup>
                                </VisualStateManager.VisualStateGroups>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                        <Setter Property="Background" Value="{DynamicResource ForegroundBrush}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type TextBlock}" x:Key="HeaderTextBlock">
                <Setter Property="Background" Value="{DynamicResource ButtonBackgroundBrush}"/>
                <Setter Property="Foreground" Value="{DynamicResource ForegroundBrush}"/>
            </Style>
        </ResourceDictionary>
    </Application.Resources>
</Application>
